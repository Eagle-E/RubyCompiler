[X] <program> -> <compstmt>

[X] <compstmt> -> <stmt> {<t> <stmt>} [<t>]

[X] <stmt> -> 
	[X]			  “undef” <identifier>
    [X] 		| “def” <identifier> “(” [<arglist>] “)” <compstmt> “end”
    [X] 		| “return” <expr>
    [X] 		| “if” <expr> <then> <compstmt> {“elsif” <expr> <then> <compstmt>} [“else” <compstmt>] “end”
    [X] 		| “unless” <expr> <then> <compstmt> [“else” <compstmt>] “end”
    [X] 		| “while” <expr> <do> <compstmt> “end”
    [X] 		| “until” <expr> <do> <compstmt> “end”
    [X] 		| “case” <expr> “when” <expr> <then> <compstmt> {“when” <expr> <then> <compstmt>}[“else” <compstmt>] “end”
    [X] 		| <expr>

[X] <expr> -> <identifier> <assignop> <expr>
    [X]			| <expr> <binop> <expr> 
    [X]			| “!”<expr>
    [X]			| <literal> 
    [X]			| <identifier> 
    [X]			| “-” <expr>
    [X]			| <identifier> “(” [<exprs>] “)” 
    [X]			| “(” <expr> “)”

[X] <exprs> -> <expr> {“,” <expr>}

[X] <arglist> -> <identifier> {“,” <identifier>}

[X] <then> -> <t> | “then” | <t> “then”

[X] <do> -> <t> | “do” | <t> “do”

[X] <literal> -> INTEGER | BOOLEAN

[X] <t> -> “;” | “\n”

[X] <assignop> -> “=” | “+=” | “−=” | “∗=” | “/=” | “&&=” | “||=”

[X] <binop> -> “+” | “-” | “*” | “/” | “>” | “>=” | “<” | “<=” | “==” | “!=” | “&&” | “||”